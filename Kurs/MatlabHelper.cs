using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using MLApp;
using KursCore;
using System.Globalization;

namespace Kurs
{
    /// <summary>
    /// Вспомогательный класс для взаимодействия с MATLAB, включая генерацию и запуск .m скриптов.
    /// </summary>
    public static class MatlabHelper
    {
        /// <summary>
        /// Делегат для обновления статуса операции в пользовательском интерфейсе.
        /// </summary>
        /// <param name="message">Сообщение для отображения.</param>
        /// <param name="isBusy">Указывает, занят ли процесс (true) или завершен (false).</param>
        public delegate void UpdateStatusDelegate(string message, bool isBusy);

        /// <summary>
        /// Асинхронно генерирует .m скрипт на основе предоставленных данных, сохраняет его на рабочий стол
        /// и запускает этот скрипт в MATLAB для выполнения вычислений и построения графика.
        /// </summary>
        /// <param name="xData">Список X-координат точек данных.</param>
        /// <param name="yData">Список Y-координат точек данных.</param>
        /// <param name="modelType">Тип регрессионной модели (линейная или полиномиальная).</param>
        /// <param name="polynomialDegree">Степень полинома (используется, если modelType - Polynomial).</param>
        /// <param name="ownerControl">Элемент управления (обычно форма), используемый для отображения сообщений и управления UI.</param>
        /// <param name="statusUpdater">Делегат для обновления статуса в UI (например, текст кнопки).</param>
        /// <returns>Задача, представляющая асинхронную операцию.</returns>
        public static async Task GenerateAndRunMatlabScript(
            List<double> xData,
            List<double> yData,
            RegressionModelType modelType,
            int polynomialDegree,
            Control ownerControl,
            UpdateStatusDelegate statusUpdater)
        {
            if (ownerControl == null)
                throw new ArgumentNullException(nameof(ownerControl), "Элемент управления-владелец не может быть null.");
            if (statusUpdater == null)
                throw new ArgumentNullException(nameof(statusUpdater), "Делегат обновления статуса не может быть null.");

            int requiredPoints = modelType == RegressionModelType.Linear ? 2 : polynomialDegree + 1;
            if (xData == null || yData == null || xData.Count < requiredPoints || yData.Count < requiredPoints || xData.Count != yData.Count)
            {
                MessageBox.Show(ownerControl, $"Недостаточно данных или данные некорректны для вычислений в MatLab. Требуется {requiredPoints} точек.",
                                "Ошибка данных MatLab", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            ownerControl.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            statusUpdater("MatLab (Обработка...)", true);

            MLApp.MLApp matlab = null;
            string matlabScriptPath = string.Empty;

            try
            {
                string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
                string matlabScriptName = "LeastSquares.m";
                matlabScriptPath = Path.Combine(desktopPath, matlabScriptName);

                StringBuilder scriptContent = new StringBuilder();

                scriptContent.AppendLine("% Generated by Kurs Application");
                scriptContent.AppendLine($"% Date: {DateTime.Now.ToString(CultureInfo.InvariantCulture)}");
                scriptContent.AppendLine($"% Regression Type: {modelType}");
                if (modelType == RegressionModelType.Polynomial)
                {
                    scriptContent.AppendLine($"% Polynomial Degree: {polynomialDegree}");
                }
                scriptContent.AppendLine();
                scriptContent.AppendLine("% Source Data");
                scriptContent.Append("x_cs = [");
                scriptContent.Append(string.Join(" ", xData.Select(d => d.ToString(CultureInfo.InvariantCulture))));
                scriptContent.AppendLine("]';");

                scriptContent.Append("y_cs = [");
                scriptContent.Append(string.Join(" ", yData.Select(d => d.ToString(CultureInfo.InvariantCulture))));
                scriptContent.AppendLine("]';");
                scriptContent.AppendLine();

                scriptContent.AppendLine("x = x_cs;");
                scriptContent.AppendLine("y = y_cs;");
                scriptContent.AppendLine("disp('Data loaded into MatLab workspace:');");
                scriptContent.AppendLine("disp(['Size of x: ', num2str(size(x))]);");
                scriptContent.AppendLine("disp(['Size of y: ', num2str(size(y))]);");
                scriptContent.AppendLine();
                scriptContent.AppendLine("figure;");
                scriptContent.AppendLine("scatter(x, y, 50, 'filled', 'DisplayName', 'Source Data');");
                scriptContent.AppendLine("hold on;");

                string plotTitle;

                if (modelType == RegressionModelType.Linear)
                {
                    scriptContent.AppendLine("p_coeffs = polyfit(x, y, 1);");
                    scriptContent.AppendLine("if length(unique(x)) > 1");
                    scriptContent.AppendLine("  x_plot_range = [min(x) - 0.1*(max(x)-min(x)), max(x) + 0.1*(max(x)-min(x))];");
                    scriptContent.AppendLine("  if x_plot_range(1) == x_plot_range(2), x_plot_range = [x_plot_range(1)-1, x_plot_range(2)+1]; end;");
                    scriptContent.AppendLine("  x_plot_vals = linspace(x_plot_range(1), x_plot_range(2), 200);");
                    scriptContent.AppendLine("else");
                    scriptContent.AppendLine("  x_plot_vals = [x(1)-1, x(1)+1];");
                    scriptContent.AppendLine("end");
                    scriptContent.AppendLine("y_fit = polyval(p_coeffs, x_plot_vals);");
                    scriptContent.AppendLine("plot(x_plot_vals, y_fit, 'r-', 'LineWidth', 2, 'DisplayName', sprintf('Linear: y = %.4fx %+.4f', p_coeffs(1), p_coeffs(2)));");
                    scriptContent.AppendLine("disp('Linear Regression Coefficients (a, b):');");
                    scriptContent.AppendLine("fprintf('a (slope) = %.4f\\n', p_coeffs(1));");
                    scriptContent.AppendLine("fprintf('b (intercept) = %.4f\\n', p_coeffs(2));");
                    scriptContent.AppendLine("disp(['Equation: ', sprintf('y = %.4fx %+.4f', p_coeffs(1), p_coeffs(2))]);");
                    plotTitle = "Linear Regression";
                }
                else
                {
                    scriptContent.AppendLine($"degree = {polynomialDegree};");
                    scriptContent.AppendLine("p_coeffs = polyfit(x, y, degree);");
                    scriptContent.AppendLine("if length(unique(x)) > 1");
                    scriptContent.AppendLine("  x_plot_range = [min(x) - 0.1*(max(x)-min(x)), max(x) + 0.1*(max(x)-min(x))];");
                    scriptContent.AppendLine("  if x_plot_range(1) == x_plot_range(2), x_plot_range = [x_plot_range(1)-1, x_plot_range(2)+1]; end;");
                    scriptContent.AppendLine("  x_plot_vals = linspace(x_plot_range(1), x_plot_range(2), 200);");
                    scriptContent.AppendLine("else");
                    scriptContent.AppendLine("  x_plot_vals = [x(1)-1, x(1)+1];");
                    scriptContent.AppendLine("end");
                    scriptContent.AppendLine("y_fit = polyval(p_coeffs, x_plot_vals);");

                    scriptContent.AppendLine($"eq_legend_str = ['Polynomial (deg. ', num2str(degree), ')'];");
                    scriptContent.AppendLine("plot(x_plot_vals, y_fit, 'r-', 'LineWidth', 2, 'DisplayName', eq_legend_str);");

                    scriptContent.AppendLine($"disp(['Polynomial Regression Coefficients (degree ', num2str(degree), '):']);");
                    scriptContent.AppendLine("eq_str_full_matlab = 'y = ';");
                    scriptContent.AppendLine("for k_coeff = 1:length(p_coeffs)");
                    scriptContent.AppendLine("    coeff_val = p_coeffs(k_coeff);");
                    scriptContent.AppendLine("    pow_val = length(p_coeffs) - k_coeff;");
                    scriptContent.AppendLine("    if k_coeff > 1");
                    scriptContent.AppendLine("        if coeff_val >= 0, eq_str_full_matlab = [eq_str_full_matlab, ' + ']; else, eq_str_full_matlab = [eq_str_full_matlab, ' - ']; coeff_val = abs(coeff_val); end");
                    scriptContent.AppendLine("    elseif coeff_val < 0 && k_coeff == 1");
                    scriptContent.AppendLine("        eq_str_full_matlab = [eq_str_full_matlab, '-']; coeff_val = abs(coeff_val);");
                    scriptContent.AppendLine("    end");
                    scriptContent.AppendLine("    eq_str_full_matlab = [eq_str_full_matlab, sprintf('%.4f', coeff_val)];");
                    scriptContent.AppendLine("    if pow_val == 1, eq_str_full_matlab = [eq_str_full_matlab, 'x'];");
                    scriptContent.AppendLine("    elseif pow_val > 1, eq_str_full_matlab = [eq_str_full_matlab, 'x^', num2str(pow_val)]; end");
                    scriptContent.AppendLine("    fprintf('c[%d] (coeff. for x^%d) = %.4f\\n', pow_val, pow_val, p_coeffs(k_coeff));");
                    scriptContent.AppendLine("end");
                    scriptContent.AppendLine("disp(['Equation: ', eq_str_full_matlab]);");
                    plotTitle = $"Polynomial Regression (degree {polynomialDegree})";
                }

                scriptContent.AppendLine("hold off;");
                scriptContent.AppendLine("xlabel('X Data');");
                scriptContent.AppendLine("ylabel('Y Data');");
                scriptContent.AppendLine($"title('{plotTitle} - Kurs App');");
                scriptContent.AppendLine("legend show;");
                scriptContent.AppendLine("grid on;");
                scriptContent.AppendLine("disp('Plot generated.');");

                File.WriteAllText(matlabScriptPath, scriptContent.ToString(), Encoding.Default);

                await Task.Run(() =>
                {
                    try
                    {
                        Type matlabAppType = Type.GetTypeFromProgID("Matlab.Application");
                        if (matlabAppType == null) matlabAppType = Type.GetTypeFromProgID("MLApp.MLApp");

                        if (matlabAppType == null)
                            throw new InvalidOperationException("Не удалось найти ProgID для MatLab.");

                        matlab = (MLApp.MLApp)Activator.CreateInstance(matlabAppType);
                        if (matlab == null)
                            throw new InvalidOperationException("Не удалось создать экземпляр MatLab.");

                        string scriptDirectory = Path.GetDirectoryName(matlabScriptPath);
                        string scriptFileNameWithExtension = Path.GetFileName(matlabScriptPath);

                        string cdCommand = $"cd '{scriptDirectory.Replace("'", "''")}'";
                        string runCommand = $"run('{scriptFileNameWithExtension.Replace("'", "''")}')";

                        matlab.Execute(cdCommand);
                        matlab.Execute(runCommand);
                    }
                    catch (Exception ex)
                    {
                        throw new Exception($"Ошибка во время выполнения MatLab: {ex.Message}", ex);
                    }
                    finally
                    {
                        if (matlab != null)
                        {
                            Marshal.ReleaseComObject(matlab);
                            matlab = null;
                        }
                    }
                });

                ownerControl.Invoke((MethodInvoker)delegate
                {
                    MessageBox.Show(ownerControl,
                        $"Скрипт для MatLab '{matlabScriptName}' создан на рабочем столе.",
                        "Операция MatLab успешна",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                });
            }
            catch (Exception ex)
            {
                ownerControl.Invoke((MethodInvoker)delegate {
                    MessageBox.Show(ownerControl, $"Произошла ошибка при операции с MatLab:\n{ex.Message}\n\nФайл скрипта (если создан):\n{matlabScriptPath}",
                                   "Ошибка операции MatLab", MessageBoxButtons.OK, MessageBoxIcon.Error);
                });
            }
            finally
            {
                ownerControl.Enabled = true;
                Cursor.Current = Cursors.Default;
                statusUpdater("MatLab", false);
            }
        }
    }
}